function [GriddedGlacierCount,...
GriddedMeanElevation,...
GriddedHypsometry,...
GriddedElevationBins...
GriddedSTD...
TotalArea...
GriddedCoverage...
GriddedMinElevation...
GriddedMaxElevation...
GriddedBahrELA] = sort_RGI_glaciers_onto_regular_grid(LonEdges,LatEdges)

%% Sort all RGI glaciers and their characteristics onto a regular global lat/lon grid.
%Inputs: Edges that define the lat/lon bins into which RGI glaciers will be binned
%Latitude edges defined from -90 to 90 (or portions within this monotonic range)
%Longitude edges defined from 0 to 360 (or portions within this monotonic range)
 
AAREq=0.57;
earthellipsoid = referenceSphere('earth','km');

GriddedGlacierCount =zeros(length(LatEdges)-1,length(LonEdges)-1);
GriddedMeanElevation=zeros(length(LatEdges)-1,length(LonEdges)-1);
GriddedHypsometry   =cell(length(LatEdges)-1,length(LonEdges)-1,100);
GriddedElevationBins=cell(length(LatEdges)-1,length(LonEdges)-1,100);
GriddedSTD          =zeros(length(LatEdges)-1,length(LonEdges)-1);
TotalArea           =zeros(length(LatEdges)-1,length(LonEdges)-1);
GriddedCoverage     =zeros(length(LatEdges)-1,length(LonEdges)-1);
GriddedMinElevation =zeros(length(LaY=tEdges)-1,length(LonEdges)-1);
GriddedMinElevation(:,:) =1.e10;
GriddedMaxElevation =zeros(length(LatEdges)-1,length(LonEdges)-1);
GriddedBahrELA      =zeros(length(LatEdges)-1,length(LonEdges)-1);

%% Load RGI glacier, and find corresponding cell to put it in.

region=dir('RGI_data/*_RGI_outlines.mat');
InputDir='RGI_topographies_masks_and_hypsometries2/';

for r=1:19
    NGlacierRejected=0;
    txt=regexp(region(r).name,'_','split');
    regionname=txt{1};
    disp(['Gridding RGI region: ' regionname '.'])
    nn=0;
    nfile=1;
    fname=strcat(InputDir,regionname,num2str(nfile),'.mat');
    while exist(fname,'file')

        load(fname,'RGIDataStructure','Hypsometry','ElevationBins','VerticalBinResolution');
        ElevationBins=ElevationBins(1:end-1)+VerticalBinResolution./2;%add 1/2 of vertical bin resolution to elevation bin elevations to make elevation represent middle of bin
        %Filter out outlier ice masses: Glaciers with no elevation range (ice shelves?), Glaciers with less than 500m of vertical relief and (nominally, tidewater) glaciers that are at least 200m above sea level
        if ~isempty(ElevationBins)>0 && range(ElevationBins) > 200. && min(ElevationBins) > 200.          

            %wrap longitudes so they run 0-360.
            RGIDataStructure.CENLON=wrapTo360(RGIDataStructure.CENLON);
            %if the first edge of the Longitude edge array is negative, it means the central longitude is near or on Greenwich.
            %Any glaciers just west of Greenwich should be included in this bin.  So, if this situation arises, make the glacier
            %longitude negative so it is caught by the near-Greenwich bin.
            if LonEdges(1)<0. && RGIDataStructure.CENLON > 360.+LonEdges(1)
                RGIDataStructure.CENLON = RGIDataStructure.CENLON-360.;
            end

            iLat=find(LatEdges<RGIDataStructure.CENLAT,1,'last');
            iLon=find(LonEdges<RGIDataStructure.CENLON,1,'last');

            GriddedGlacierCount(iLat,iLon)=GriddedGlacierCount(iLat,iLon)+1;
            
            if TotalArea(iLat,iLon)==0
                TotalArea(iLat,iLon)=areaquad(LatEdges(iLat),LonEdges(iLon),LatEdges(iLat+1),LonEdges(iLon+1),earthellipsoid);
            end
            
            GriddedMeanElevation(iLat,iLon)=GriddedMeanElevation(iLat,iLon)+wmean(ElevationBins,Hypsometry');
            
            GriddedMinElevation(iLat,iLon)=min(GriddedMinElevation(iLat,iLon),min(ElevationBins));

            GriddedMaxElevation(iLat,iLon)=max(GriddedMaxElevation(iLat,iLon),max(ElevationBins));

            GriddedHypsometry{iLat,iLon,GriddedGlacierCount(iLat,iLon)}=Hypsometry;

            i=find(cumsum(Hypsometry)./sum(Hypsometry) > 1.-AAREq,1,'first');
            GriddedBahrELA(iLat,iLon)=GriddedBahrELA(iLat,iLon)+ElevationBins(i);

            GriddedElevationBins{iLat,iLon,GriddedGlacierCount(iLat,iLon)}=ElevationBins;

            GriddedSTD(iLat,iLon)=GriddedSTD(iLat,iLon)+sqrt(var(ElevationBins,Hypsometry));

            GriddedCoverage(iLat,iLon)=GriddedCoverage(iLat,iLon)+RGIDataStructure.AREA;

        else
            NGlacierRejected=NGlacierRejected+1;
        end
        nfile=nfile+1;
        fname=strcat(InputDir,regionname,num2str(nfile),'.mat');
    end
    disp(['% Glaciers rejected=' num2str(NGlacierRejected./nfile)])
end

GriddedMeanElevation    =GriddedMeanElevation./GriddedGlacierCount;
GriddedSTD              =GriddedSTD./GriddedGlacierCount;
GriddedCoverage         =GriddedCoverage./TotalArea;
GriddedBahrELA          =GriddedBahrELA./GriddedGlacierCount;

disp('Saving Gridded RGI data...')
save ('Gridded_RGI_data/RGIGriddedData.mat','Gridded*')
