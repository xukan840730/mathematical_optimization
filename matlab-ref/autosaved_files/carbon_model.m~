close all
clear all
%Define global variables
global k

%Fluxes (F) and rate coefficients (k) are stored in matrix form: F(i,j)
%means the flux of carbon from component i to component j.  Likewise,
%k(i,j) identifies the rate coefficient associated with the flux from i to
%j.
%The initial mass of carbon (M0) is stored in a lenght-9 vector.

%Load initial values
F=zeros(9,9);
k=zeros(9,9);
M0=zeros(9,1);
%Fluxes from atmosphere (component 1)
F(1,2)=89.;
F(1,5)=110.;

%Fluxes from surface ocean (component 2)
F(2,1)=90.;
F(2,3)=40.;
F(2,4)=38.;

%Fluxes from surface biota (component 3)
F(3,2)=36.;
F(3,4)=4.;

%Fluxes from intermediate/deep water (component 4)
F(4,2)=42.;

%Fluxes from short-lived biota (component 5)
F(5,1)=55.;
F(5,6)=15.;
F(5,7)=40.;

%Fluxes from long-lived biota (component 6)
F(6,7)=15.;

%Fluxes from litter (component 7)
F(7,1)=50.;
F(7,2)=1.;
F(7,8)=3.;
F(7,9)=1.;

%Fluxes from soil (component 8)
F(8,1)=3.;

%Fluxes from peat (component 9)
F(9,1)=1.;

%Initial mass of carbon
M0(1)=725.;
M0(2)=725.;
M0(3)=3.;
M0(4)=37675.;
M0(5)=110.;
M0(6)=450.;
M0(7)=60.;
M0(8)=1350.;
M0(9)=160.;

%Calculate rate coefficients
for n=1:9;
  k(n,:)=F(n,:)/M0(n);
end

%Set time interval
time_min=1800.;
time_max=2200.;
n=2200-1800+1;
timespan=linspace(time_min,time_max,n);

%Use the Matlab Runge-Kutta 4/5 solver to solve for the evolving M of each
%component over the timespan defined above.  The call to ode45 includes the
%reference to function carb_odes which includes the set of ODEs which define
%dM/dT.  It is this set of equations that Matlab marches through time.
[t,M] = ode45(@carb_odes,timespan,M0);

%% Plot M(t) evolution of all components
hold on
subplot
plot(M(:,n))
hold off


