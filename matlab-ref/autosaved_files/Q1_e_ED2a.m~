clear all
close all

nx=60;   %Use a spatial domain length of 60000 m
dx=1000;    % with a grid resolution dx of 1000 m (0:1000:60000), and a 
dt=1/24;    % timestep dt of 1/24 year (in years)
yr=1000;    %length of model
nt=yr/dt;    %number of time steps for however many years


bed_elev=(0:(3000/nx):3000);% Over this domain, define a bed slope that drops from 3000m to sealevel.
x=(0:dx:nx*dx);

thk(1:length(bed_elev))=0;  %grows a glacier from ice-free conditions by starting thickness=0 everywhere

%Creating an SMB according to temperature and meltrates
ALR=-0.006; %atmospheric lapse rate
F=2;        %PDD factor (m/yrC)
accum=3;    %annual accumulation of snow (m)

T_drop= ALR*(thk+bed_elev);
%T_sl=[-5:1:30]; %temp at Sealevel
X=0:(2*pi/24):(2*pi);
T_sl=zeros(36,length(X));
T_sl(:,1)=[-5:1:30];

for i=1:length(X)
    T_sl(:,i)=T_sl(:,1)+(12*sin(X(i)));
    T_sl=%Jer
end

A=61;
L_T=36;
C=24;

for i=1:L_T
    for j=1:C
    T_sat(:,i,j)=T_sl(i,j) + T_drop;  %T_sat for just one possible value of T_sl
    end
end

M=zeros(A,L_T,C);

for i=1:L_T
    for j=1:A
        for k=1:C
        if T_sat(j,i,k)<=0
            M(j,i,k)=0;
        else if T_sat(j,i)>0
            M(j,i,k)=-F*T_sat(j,i,k);
            end
        end
        end
    end
end


tem=24000;
vg=zeros(nt+1,L_T);
% vgB=zeros(tem+1,L_T);
% vgC=zeros(tem+1,L_T);
thk_matrix=zeros(nt+1,nx+1);
thk_matrix_TA=zeros(nt+1,nx+1,L_T);
an_vg=zeros(nt/24,L_T);
% an_vgB=zeros(floor(tem/24),L_T);
% an_vgC=zeros(floor(tem/24),L_T);


% A=61;
% L_T=36;
% C=24;
for k=1:L_T  %vary k according to what T_sl is to be used
     
%     smb=accum+M(:,k,n);
%     smb=transpose(smb);
    thk(1:length(bed_elev))=0;
    

        for i=1:24:nt-23
            for n=1:C   
                smb=accum+M(:,k,n);
                smb=transpose(smb);
                thk=evolve_ice_ed(thk,bed_elev,smb,nx,dx,dt);
                thk_matrix(i+n,:)=thk;

                vg(i+n,k)=sum(thk);

            end
        end

    thk_matrix_TA(:,:,k)=thk_matrix;
end

%% Once it works up to here, everything else should work as well, assuming
%% enough memory exists


%Warm eqm conditions by 1degree C 
for k=1:(L_T-1)                   %vary k according to what T_sl is to be used
    smb=accum+M(:,k+1);
    smb=transpose(smb);
    thk(1:length(bed_elev))=thk_matrix_TA(24001,:,k);
    for i=1:tem
        thk=evolve_ice_ed(thk,bed_elev,smb,nx,dx,dt);
        thk_matrix(i+1,:)=thk;

        vgB(i+1,k)=sum(thk);

    end
end

%cool eqm conditions by 1degree C 
for k=2:L_T                  %vary k according to what T_sl is to be used
    smb=accum+M(:,k-1);
    smb=transpose(smb);
    thk(1:length(bed_elev))=thk_matrix_TA(24001,:,k);
    for i=1:tem
        thk=evolve_ice_ed(thk,bed_elev,smb,nx,dx,dt);
        thk_matrix(i+1,:)=thk;

        vgC(i+1,k)=sum(thk);

    end
end


%find the first dates at which equilibrium is reached
eqm=zeros(1001,L_T);
eqm_warm1=zeros(1001,L_T);
eqm_cool1=zeros(1001,L_T);

for k=1:L_T  
    for i=24:24:nt
        an_vg((i/24)+1,k)=mean(vg((i-23):i,k));
       
        z=(i/24);
        
        
        crit=1.e-6*an_vg(z+1,k);
        d_vg=an_vg(z+1,k)-an_vg(z,k);

      if  d_vg < crit 
          if eqm(z,k)==0
            eqm(z,k)=i/24;
          end
      end
      
    end
end

for k=1:L_T-1
    for i=24:24:tem
        an_vgB((i/24)+1,k)=mean(vgB((i-23):i,k));
       
        z=(i/24);
        
        
        crit=1.e-6*an_vgB(z+1,k);
        d_vg=an_vgB(z+1,k)-an_vgB(z,k);

      if  d_vg < crit 
          if eqm_warm1(z,k)==0
            eqm_warm1(z,k)=i/24;
          end
      end
      
    end
end

for k=1:L_T  
    for i=24:24:tem
        an_vgC((i/24)+1,k)=mean(vgC((i-23):i,k));
       
        z=(i/24);
        
        
        crit=1.e-6*an_vgC(z+1,k);
        d_vg=an_vgC(z+1,k)-an_vgC(z,k);

      if  d_vg < crit 
          if eqm_cool1(z,k)==0
            eqm_cool1(z,k)=i/24;
          end
      end
      
    end
end

%this code is done in these steps because an oddity occurs such that for
%some sea level temperatures, an equilibrium state is never reached, and so
%the 'find' function stops running as no non-zero values can be found 
a=zeros(L_T,1);
for i=1:13
    a(i)=find(eqm(:,i),1);
end
for i=15:16
    a(i)=find(eqm(:,i),1);
end
for i=18:23
    a(i)=find(eqm(:,i),1);
end

b=zeros(L_T,1);
for i=1:12
    b(i)=find(eqm_warm1(:,i),1);
end
for i=14:15
    b(i)=find(eqm_warm1(:,i),1);
end
for i=17:22
    b(i)=find(eqm_warm1(:,i),1);
end


c=zeros(L_T,1);
for i=2:14
    c(i)=find(eqm_cool1(:,i),1);
end
for i=16:17
    c(i)=find(eqm_cool1(:,i),1);
end
for i=19:24
    c(i)=find(eqm_cool1(:,i),1);
end

%determining dV(g-eq)/dT
dVdT_plus=zeros(36,1);
dVdT_minus=zeros(36,1);


for k=1:36
    if a(k)~=0
        if b(k)~=0
    dVdT_plus(k)=an_vgB(b(k),k)-an_vg(a(k),k);
        end
       
        if c(k)~=0
    dVdT_minus(k)=an_vgC(c(k),k)-an_vg(a(k),k);
        end
    end   
end

dVdT_minuss=dVdT_minus;
dVdT_pluss=dVdT_plus;

for k=1:36
if dVdT_plus(k)==0
    dVdT_plus(k)=NaN;
end
end

for k=1:36
if dVdT_minus(k)==0
    dVdT_minus(k)=NaN;
end
end

%find the difference between reaching equilibrium due to 1 degree warming
%vs due to 1 degree cooling (b vs c) (ie dV(g-eq)/dT)

plot(1:36,dVdT_plus,'r.',1:36,dVdT_minus,'k.',1:36,dVdT_pluss,'r',1:36,dVdT_minuss,'k')
title('Plot of dV(g-eq)/dT for a Glacier at Disrupted from Equilibrium by 1 degree changes in Temperature')
xlabel('Sea-Level Temperature (^o C - 5^o C) of warmed or cooled regime')
ylabel('Glacial Volume Difference (Vg)');
legend('dVdT for positive dT','dVdT _ for negative dT');