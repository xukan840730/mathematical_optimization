%% Perform analyses of the CESM-generated surface mass balance fields on multiple elevation classes.

close all

LoadFreshData = 0;
if LoadFreshData;
    clear all
    LoadFreshData = 1;
end

plot_SMB_zones=0;
plot_regional_average_smb_for_summer_winter_annual_timeseries=1;

if LoadFreshData
    %load mask that delineates ice sheets
    RegenerateMaskData=0;
    if RegenerateMaskData
        File='/Users/fyke/Projects/GLOBE_glacier_mask/output_merged/PCT_GLC_ICESHEET.nc';
        VarName='PCT_GLC_ICESHEET';
        FileInfo=ncinfo(File,VarName);
        ArrSize=FileInfo.Size;
        IceSheetMask=zeros(ArrSize(1),ArrSize(2));
        for nlev=1:ArrSize(3)
            nlev
            IceSheetMask=IceSheetMask+ncread(File,VarName,[1 1 nlev],[ArrSize(1) ArrSize(2) 1]);
        end
        IceSheetMask=permute(IceSheetMask,[2 1]);
        IceSheetMask=[IceSheetMask(:,3601:7200) IceSheetMask(:,1:3600)];
        [x,y]=meshgrid( linspace(0,1,size(IceSheetMask,2)),linspace(0,1,size(IceSheetMask,1)) ) ;
        [xq,yq]=meshgrid( linspace(0,1,288),linspace(0,1,192) ) ;
        IceSheetMask=interp2( x , y , IceSheetMask , xq, yq);
        save IceSheetMask IceSheetMask
        clear X Y Xq Yq
    else
        load IceSheetMask
    end
    
end

%%
if plot_SMB_zones
    
    if LoadFreshData % Load data if necessary: first level is CESM-forced IG, and second level is NCEP-forced IG
        for nlev=1:10
            SMB(:,:,nlev,1)=ncread('/Volumes/Bluefire/ptmp/SeaRise_TG_20thC_forcing_data/modern_climatological_average.nc',sprintf('s2x_Fgss_qice%2.2d',nlev))';
            SMB(:,:,nlev,2)=ncread('/Volumes/Bluefire/ptmp/NCEP_forced_IG_forcing_data/modern_climatological_average.nc',sprintf('s2x_Fgss_qice%2.2d',nlev))';
        end
    end
    
    TitleLabel={'CESM-forced IG' 'NCEP-forced IG'};
    
    for DataSet=1:2
        SMBSlice=SMB(:,:,:,DataSet);
        SMBmax=max(SMBSlice,[],3);
        SMBmin=min(SMBSlice,[],3);
        
        SMBZones=nan(size(SMBmax));
        SMBZones(SMBmin>=0. & IceSheetMask == 0)=1; %no ablation zone
        SMBZones(SMBmax<=0. & IceSheetMask == 0)=2; %no accumulation zone
        SMBZones(SMBmin<0. & SMBmax>0. & IceSheetMask ==0)=3; %both ablation and accumulation zones
        SMBZones(SMBmax==SMBmin)=nan;
        NoAblationSMBProfiles=[];
        NoAccumSMBProfiles=[];
        GoodSMBProfiles=[];
        for i=1:size(SMBSlice,1)
            for j=1:size(SMBSlice,2)
                if IceSheetMask(i,j) == 0
                    if SMBZones(i,j)==1
                        NoAblationSMBProfiles=[NoAblationSMBProfiles squeeze(SMBSlice(i,j,:))];
                    end
                    if SMBZones(i,j)==2
                        NoAccumSMBProfiles=[NoAccumSMBProfiles squeeze(SMBSlice(i,j,:))];
                    end
                    if SMBZones(i,j)==3
                        GoodSMBProfiles=[GoodSMBProfiles squeeze(SMBSlice(i,j,:))];
                    end
                end
            end
        end
        whos
        NoAblationSMBProfiles=squeeze(NoAblationSMBProfiles);
        NoAccumSMBProfiles=squeeze(NoAccumSMBProfiles);
        GoodSMBProfiles=squeeze(GoodSMBProfiles);
        
        subplot(1,2,DataSet)
        colormap(jet(3))
        pcolor(SMBZones),shading flat
        axpos=get(gca,'Position');
        labels={'no ablation zone' 'no accum zone' 'ablation & accum zones'};
        lcolorbar(labels,'Location','horizontal','Fontsize',12)
        set(gca,'Position',axpos)
        title(TitleLabel{DataSet})
        set(gca,'Xtick',[],'Ytick',[])
    end
    print('-dpng','figs/Location_of_SMB_column_types.png')
    
end
%%
if plot_regional_average_smb_for_summer_winter_annual_timeseries
    
    TotalYears=1;
    sec2year=60.*60.*24.*365.;
    km22m2=1.e6;
    rhoice=0.913;
    kg2m3ice=1.e-3./rhoice;
    kg2m3water=1.e-3;
    %conversion from kg/m^2/s to m/yr WE
    UnitConversion=kg2m3water.*sec2year;
    
    % calculate fraction of year spent in each season (for high/low lat cases)
    HighLatWinterLength=diff(datenum({'01-Sep-0000' '01-May-0001'}))./365;
    LowLatWinterLength=diff(datenum({'01-Oct-0000' '01-Apr-0001'}))./365;
    HighLatSummerLength=1.-HighLatWinterLength;
    LowLatSummerLength=1.-LowLatWinterLength;
    
    if LoadFreshData
        
        %load CESM SMB data, process for winter/summer balances
        InputDir{1}='/Volumes/Bluefire/ptmp/SeaRise_TG_20thC_forcing_data/seasonal_averages/';
        InputDir{2}='/Users/fyke/Projects/Glacier_modelling/CESM_SMB_analysis/seasonal_averages/';
        InputDir{3}='/Volumes/Bluefire/ptmp/SeaRise_TG_20thC_forcing_data/';
        %to speed things up, unzip files to local directory (will this save time i.e. will files be transported in zipped form then unzipped locally?
        
        CopyFreshSMBData=0;
        if CopyFreshSMBData
            disp('Copying new zipped averages from bluefire to local directory and unzipping')
            if exist(InputDir{2},'dir')
                rmdir(InputDir{2},'s')
            end
            mkdir(InputDir{2})
            copyfile(strcat(InputDir{1},'*.gz'),InputDir{2});
            gunzip(strcat(InputDir{2},'*.gz'),InputDir{2});
        end
        yrs=1960;
        yre=yrs+TotalYears-1;
        yr=yrs:yre;
        vertlevs=10;
        CESMWinterBalance=zeros([size(IceSheetMask) vertlevs length(yr)],'single');
        CESMSummerBalance=zeros([size(IceSheetMask) vertlevs length(yr)],'single');
        CESMAnnualBalance=zeros([size(IceSheetMask) vertlevs length(yr)],'single');
        i75degreesNorth=knnsearch(linspace(-90,90,size(IceSheetMask,1))',75); %get nearest index of latitude band nearest to 75N
        %tend=length(yr)
        
        for t=1:TotalYears
            disp(['Loading SMB for year: ' num2str(yr(t))])
            tic
            for nlev=1:vertlevs
                %load annual SMB files
                CESMAnnualBalance(:,:,nlev,t)=single(ncread(strcat(InputDir{2},num2str(yr(t)),'_annual.nc'),sprintf('s2x_Fgss_qice%2.2d',nlev))');
                CESMAnnualBalance(:,:,nlev,t)=CESMAnnualBalance(:,:,nlev,t).*UnitConversion;
                %load winter SMB files
                hlatwinter=single(ncread(strcat(InputDir{2},num2str(yr(t)),'_high_lat_winter.nc'),sprintf('s2x_Fgss_qice%2.2d',nlev))');
                llatwinter=single(ncread(strcat(InputDir{2},num2str(yr(t)),'_low_lat_winter.nc'),sprintf('s2x_Fgss_qice%2.2d',nlev))');
                CESMWinterBalance(1:i75degreesNorth,:,nlev,t)=llatwinter(1:i75degreesNorth,:).*UnitConversion.*LowLatWinterLength;
                CESMWinterBalance(i75degreesNorth+1:end,:,nlev,t)=hlatwinter(i75degreesNorth+1:end,:).*UnitConversion.*HighLatWinterLength;
                %load summer SMB files
                hlatsummer=single(ncread(strcat(InputDir{2},num2str(yr(t)),'_high_lat_summer.nc'),sprintf('s2x_Fgss_qice%2.2d',nlev))');
                llatsummer=single(ncread(strcat(InputDir{2},num2str(yr(t)),'_low_lat_summer.nc'),sprintf('s2x_Fgss_qice%2.2d',nlev))');
                CESMSummerBalance(1:i75degreesNorth,:,nlev,t)=llatsummer(1:i75degreesNorth,:).*UnitConversion.*LowLatSummerLength;
                CESMSummerBalance(i75degreesNorth+1:end,:,nlev,t)=hlatsummer(i75degreesNorth+1:end,:).*UnitConversion.*HighLatSummerLength;
            end
            toc
        end
        
        CESMElevations=zeros([size(IceSheetMask) vertlevs]);
        disp('Loading elevation data')
        tic
        for nlev=1:vertlevs
            CESMElevations(:,:,nlev)=ncread(strcat(InputDir{3},'modern_climatological_average.nc'),sprintf('s2x_Ss_topo%2.2d',nlev))';
        end
        toc
        
        %% load gridded RGI data
        disp('Loading RGI data')
        tic
        RGIInputOutputDir='/Users/fyke/Projects/Glacier_modelling/data/Gridded_RGI_data';
        RGIInputOutputFile='RGI_gridded_to_CESM';
        load(fullfile(RGIInputOutputDir,RGIInputOutputFile),'Gridded*')
        toc
        
    end
end

%% accumulate region-wide SMB timeseries for winter, summer, and average
close all
WinterBalance=zeros(TotalYears,1);
SummerBalance=zeros(TotalYears,1);
AnnualBalance=zeros(TotalYears,1);
TotalArea     =zeros(TotalYears,1);
InterpType='linear';

nGlaciersinRGIRegion=0;
nGridcellsWithRGIGlaciers=0;

CESMMinElev=nanmin(CESMElevations,[],3);
CESMMaxElev=nanmax(CESMElevations,[],3);

MeanCESMAnnualBalance=nanmean(CESMAnnualBalance,4);

for i=1:size(IceSheetMask,1)
    for j=1:size(IceSheetMask,2)
        if GriddedGlacierRegion(i,j) == 8 && max(CESMWinterBalance(i,j,:,1)) < 1.e20 %if in GIS periphery RGI region and SMB column exists
            
            
            ElevRange=CESMMinElev(i,j):10:CESMMaxElev(i,j);
            %calculate where average CESM ELA is at this (i,j) point, on 10-meter spacing
            FullSMBColumn=interp1(squeeze(CESMElevations(i,j,:)),squeeze(MeanCESMAnnualBalance(i,j,:)),ElevRange);
            CESMELAElevation=ElevRange(knnsearch(FullSMBColumn',0)); %get elevation with nearest-to-zero annual SMB (i.e., the ELA)
            
            figure
            subplot(1,3,1)
            hold on
            
            CONTINUE HERE: PLOT GLACIER ELEVATIONS?HYPSOMETRY MORE EFFECIENTLY AGAINST CLIMTOLOGICAL SMB CONDITIONS
            ALSO, CODE UP TO OBTAIN MEAN/STD OF GRI ELA (BASED ON BAHR APPROACH) TO COMPARE AGAINST CLIMATOLOGICAL CESM ELA
            
            TotalHypsInGridCell=zeros(1000,1);
            ElevLevels=5:10:9995;
            nGridcellsWithRGIGlaciers=nGridcellsWithRGIGlaciers+1;
            nGlaciersinCESMGridCell=0;
            
            for glc=1:size(GriddedHypsometry,3)
                if ~isempty(GriddedHypsometry{i,j,glc})
                    nGlaciersinCESMGridCell=nGlaciersinCESMGridCell+1;
                    nGlaciersinRGIRegion=nGlaciersinRGIRegion+1;
                    hyps=[GriddedHypsometry{i,j,glc}].*km22m2;
                    elev=[GriddedElevationBins{i,j,glc}]';

                    %accumulate total hypsometry over (i,j) grid cell
                    iLevel=find(ElevLevels==elev(1));
                    TotalHypsInGridCell(iLevel:iLevel+length(hyps)-1)=TotalHypsInGridCell(iLevel:iLevel+length(hyps)-1)+hyps;
                    TotalArea=TotalArea+sum(hyps); %accumulate total area once on first step
                    %Get minimum/maximum ice elevations in grid cell
                    line([glc glc],[min(elev) max(elev)],'linewidth',1)



                    for t=1:TotalYears
                        disp(['Processing SMB for year: ' num2str(yr(t))]);
                        %generate winter, summer, and annual balance profiles for each glacer
                        winbal=interp1(squeeze(CESMElevations(i,j,:)),squeeze(CESMWinterBalance(i,j,:,t)),elev,InterpType);
                        sumbal=interp1(squeeze(CESMElevations(i,j,:)),squeeze(CESMSummerBalance(i,j,:,t)),elev,InterpType);
                        annbal=interp1(squeeze(CESMElevations(i,j,:)),squeeze(CESMAnnualBalance(i,j,:,t)),elev,InterpType);
                        WinterBalance(t)=WinterBalance(t)+sum(winbal.*hyps);
                        SummerBalance(t)=SummerBalance(t)+sum(sumbal.*hyps);
                        AnnualBalance(t)=AnnualBalance(t)+sum(annbal.*hyps);

                    end
                end
                
                hold off
                axis tight
                ax=axis;ax(3:4)=[CESMMinElev(i,j) CESMMaxElev(i,j)];axis(ax);
                line(ax(1:2),[CESMELAElevation CESMELAElevation],'LineStyle','--','Color','r');
                
                subplot(1,3,2)
                plot(TotalHypsInGridCell,ElevLevels)
                ax=axis;ax(3:4)=[CESMMinElev(i,j) CESMMaxElev(i,j)];axis(ax);
                line(ax(1:2),[CESMELAElevation CESMELAElevation],'LineStyle','--','Color','r');
                
                subplot(1,3,3)
                plot(squeeze(MeanCESMAnnualBalance(i,j,:)),squeeze(CESMElevations(i,j,:)))
                ax=axis;ax(3:4)=[CESMMinElev(i,j) CESMMaxElev(i,j)];axis(ax);
                line(ax(1:2),[CESMELAElevation CESMELAElevation],'LineStyle','--','Color','r');
                line([0 0],[0 CESMELAElevation],'LineStyle','--','Color','k')
                
                print('-dpng',strcat('figs/cell',num2str(nGridcellsWithRGIGlaciers),'.png'))
                close all
                if nGridcellsWithRGIGlaciers==50; error('Stopping run'); end
            end
        end
    end
end
WinterBalance=WinterBalance./TotalArea;
SummerBalance=SummerBalance./TotalArea;
AnnualBalance=AnnualBalance./TotalArea;

%%

close all
hold on
h(1)=plot(yr,WinterBalance,'b');
h(2)=plot(yr,SummerBalance,'r');
h(3)=plot(yr,AnnualBalance,'k');
h(4)=plot(yr,WinterBalance+SummerBalance,'y.')
xlabel('Years')
ylabel('Greenland peripheral average mass balance (m ice)')
legend(h,{'Winter Balance','Summer Balance','Annual Balance'})
hold off


%% Old code to look at smb on ice sheet grid - need to load hist/glc/i.e* files, acab field, and set to SMB.
%
%
% smb_70_100_avg=mean(smb(:,:,70:100),3); % Find where average SMB is + and average SMB is - for last 30 years.
% smb_mask=zeros(size(smb_70_100_avg));
% smb_mask(smb_70_100_avg>0.)=1; %accum
% smb_mask(smb_70_100_avg<0.)=2; %ablation
% %accumulate average timeseries
% nacc=0;
% nabl=0;
% acc_ts=zeros(size(smb,3),1);
% abl_ts=zeros(size(smb,3),1);
% for i=1:size(smb_70_100_avg,1)
%     for j=1:size(smb_70_100_avg,2)
%         if smb_mask(i,j)==1
%             acc_ts=acc_ts+squeeze(smb(i,j,:));
%             nacc=nacc+1;
%         elseif smb_mask(i,j)==2
%             abl_ts=abl_ts+squeeze(smb(i,j,:));
%             nabl=nabl+1;
%         end
%     end
% end
% %get average
% acc_ts=acc_ts./nacc;
% abl_ts=abl_ts./nabl;
%
% %plot timeseries
% hold on
% h(1)=plot(acc_ts,'b')
% h(2)=plot(abl_ts,'r')
% legend(h,{'accumulation zone spinup timeseries' 'ablation zone spinup timeseries'})
% print('-dpng','figs/spinup_timeseries')
% figure
% smb_70_100_avg(smb_70_100_avg==0) = nan;
% pcolor(smb_70_100_avg'),axis equal tight,shading flat,h=colorbar,colormap(rbcbar(min(smb_70_100_avg(:)),max(smb_70_100_avg(:))));
% ylabel(h,'m/yr WE')
% set(gca,'Xtick',[],'Ytick',[])
% print('-dpng','figs/spun_up_SMB_field')




