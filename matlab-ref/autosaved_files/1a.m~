%% 1-D mountain glacier flow model  
clear all
close all
%% set time and space dimensions

dlength=60000;                         %set total domain length (meters)
dx=1000;                                   %set model resolution (meters)     
nx=floor(dlength/dx)+1;           %calculate number of grid cells needed

run_length=500;                      %set run length (years)
dt=1./24.;                                  %set timestep (years)    
nt=floor(run_length/dt)+1;        %calculate number of timesteps to take

%% preallocate arrays
melt=zeros(nx,1);       %melt contribution to mass balance
accum=zeros(nx,1);    %accumulation contribution to mass balance
smb=zeros(nx,1);       %net surface mass balance
bed_elev=zeros(nx,1);%ice bed elevation (meters above sea level (ASL))
thk=zeros(nx,1);         %ice thickness
elev=zeros(nx,1);        %surface elevation (bed elevation + ice thickness)
T_elev=zeros(nx,1);    %surface air temperature
T_sealev=zeros(nt,1);
vol=zeros(nt,1);          %total ice volume (assuming unit glacier width of 1 m)

%% Define the bed elevation at all points, in units of meters above sealevel (ASL).
% %Example 1:
% bed_elev(1:nx)=1000. ;                                     % a flat bed, 1 km ASL.
%Example 2:
bed_elev(1:nx)=linspace(2000,1000,nx);                  %a bed rising from 1 km to 2 km ASL.

% Set initial ice elevation to 0.
elev=bed_elev+thk;

%% Load restart file to overwrite default values set above.  
%If you want to continue running from the saved state of a previous simulation.
%load restart.mat

%% Run loop

for n=1:1 
  SLRtemp=13;  
  %% Iterative timestepping loop
  for tt=1:nt; 
    accum(:)=3.;
    lapse_rate=-.006;          %C/m
    PDD_factor=-4;          %m/yr/C
    T_elev=SLRtemp+elev.*lapse_rate;  %elevated air temp C

    %generate a new mass balance field as a function of surface temperature          
    melt(:)=0.;
    i=find(T_elev>0);
    melt(i)=(T_elev(i).*PDD_factor);  %melt rate (m/yr ice)
    smb=accum+melt; %net mass balance rate (m/yr ice)
    %Run ice evolution timestep, return updated ice thickness and surface elevation fields, and total ice volume. 
    [thk,vol(tt),elev]=evolve_ice(thk,bed_elev,elev,smb,nx,dx,dlength,dt);
    
      %Plot output

    if (mod(tt*dt,20)==0.)  
      cla
      subplot(3,1,1);hold on; plot(elev,'b','LineWidth',2);plot(bed_elev,'k','LineWidth',2);axis([0 nx min(bed_elev) max(bed_elev+1000)]); hold off
      subplot(3,1,2); plot(vol(1:tt)); axis([0 nt 0 4.3e7]);
      subplot(3,1,3); plot(T_sealev(1:tt));;axis([0 nt min(T_sealev) max(T_sealev)]);  
      M=getframe;
    end
    
  end
  
end
%% Save final ice sheet state (ice thickness, bed elevation, surface elevation)
%save restart.mat thk bed_elev elev


