clear all
close all

global percent_complete

update_glacier_tiles =             0;
process_masks_and_topog =          0;
output_files =                     1;

%% Set elevation bin boundaries for elevation-glacier mask

%generate fractional glacial areas at constant 100m intervals in CESM grid cell,
%based on GLOBE topography and glacier mask data.
binres=100.;
ebinmin=0;
ebinmax=6000;
numbins=ebinmax./binres;
binedges=linspace(ebinmin,ebinmax,numbins+1);
%increase bin/edge count by one to acount for ice above top bin
%elevation
numbins=numbins+1;
binedges(end+1)=1.e6;

%% Load topography data

%Notes on e array:
%-10800 in lon, 4800/6000 in lat
%indexing starts from northwest corner
%row == longitude == first index
%column == latitude == second index

scalefac=90.; %180 reduction in resolution (from 30" to 1.5degrees in this case).  
%set lon/lat grid size, arrays for GLOBE array
GLOBElatres=[4800 6000 6000 4800]; %set # of latitudes for the GLOBE tiles.  Note uneven spacing.
GLOBElonres=[10800 10800 10800 10800];%set # of longitudes for the GLOBE tiles.

%if GLOBE latitudes/longitudes (for any tile) do not fit evenly into coarser grid (coarsening defined by scalefac), throw error. 
if sum(mod(GLOBElatres,scalefac))>0 
    error('Some GLOBE grid latitudes do not divide evening into aggregated grid.  Check variable scalefac.')
elseif sum(mod(GLOBElonres,scalefac))>0
    error('Some GLOBE grid longitudes do not divide evening into aggregated grid.  Check variable scalefac.')    
end

GLOBEis=1;
GLOBEjs=1;
GLOBEnlon=[ repmat(GLOBElonres(1),1,4) repmat(GLOBElonres(2),1,4) repmat(GLOBElonres(3),1,4) repmat(GLOBElonres(4),1,4) ];
GLOBEnlat=[ repmat(GLOBElatres(1),1,4) repmat(GLOBElatres(2),1,4) repmat(GLOBElatres(3),1,4) repmat(GLOBElatres(4),1,4) ];
GLOBEoffset=1./60./60.*30./2;

%initialize CESM topography and land mask arrays
CESMtopo=zeros(sum(GLOBElatres)/scalefac,sum(GLOBElonres)/scalefac,'uint16');
CESMlsmsk=zeros(sum(GLOBElatres)/scalefac,sum(GLOBElonres)/scalefac,'single');

CESMnlon=GLOBEnlon./scalefac;
CESMnlat=GLOBEnlat./scalefac;
CESMoffset=GLOBEoffset.*scalefac;

CESMlat=linspace(-90+CESMoffset,90-CESMoffset,size(CESMtopo,1));
CESMlat=repmat(CESMlat',1,size(CESMtopo,2));
CESMlon=linspace(-180+CESMoffset,180-CESMoffset,size(CESMtopo,2));
CESMlon=repmat(CESMlon,size(CESMtopo,1),1);

%generate latitude ranges for each tile.  This is used in the
%area-weighting procedure.  CHECK: for each tile, is it indexed from south to
%north?
latrange(1,:)=[repmat(50.,1,4) repmat(0.,1,4) repmat(-50.,1,4) repmat(-90.,1,4)]; %set initial latitude for each tile
latrange(2,:)=[repmat(90.,1,4) repmat(50.,1,4) repmat(0.,1,4) repmat(-50.,1,4)]; %set final latitude for each tile

error()

f=dir('GLOBE_topography_data/*10g');

%% if update to glacier tiles needed, reload and recreated tiled version of Gardner data.

if update_glacier_tiles
    update_glacier_mask_tiles(f,GLOBEnlon,GLOBEnlat,GLOBEis,GLOBEjs);
end

%% Process data

CESMis=1;
CESMjs=1;

if process_masks_and_topog
    
    percent_complete=squeeze(zeros(1,16));
    
    for t=1:16;
        
        [CESMTopogTile,...
            CESMLSmskTile,...
            CESMPercentGlacier,...
            CESMPercentIceSheet,...
            TotalGlacierCoverage,...
            TotalIceSheetCoverage]...
            = process_topography_and_glacier_mask(t,f(t).name,latrange(:,t),[GLOBEnlon(t) GLOBEnlon(t)],scalefac,GLOBEoffset,numbins,binedges,binres);
        
        disp(['Printing figure...'])
        figure
        subplot(1,3,1),image(TotalGlacierCoverage),shading flat,title(strcat('Glacier tile ',num2str(t)))
        subplot(1,3,2),image(TotalIceSheetCoverage),shading flat,title(strcat('Ice Sheet tile ',num2str(t)))
        subplot(1,3,3),image(CESMTopogTile),shading flat,title(strcat('Topography ',num2str(t)))
        print('-dpng',strcat('Tile',num2str(t),'Coverage'))

        close all
        
        CESMtopo(CESMis:CESMis+CESMnlat(t)-1,CESMjs:CESMjs+CESMnlon(t)-1) = CESMTopogTile;
        CESMlsmsk(CESMis:CESMis+CESMnlat(t)-1,CESMjs:CESMjs+CESMnlon(t)-1) = CESMLSmskTile;
        
        disp(['Saving tiles...'])
        for z=1:numbins
            tile=squeeze(CESMPercentGlacier(:,:,z));
            save(strcat('tile_storage/',f(t).name,'_GlacierZtile_',num2str(z)),'tile'); %SAVE TILE TO FILE in individual layers, INSTEAD OF TRYING TO CAT THEM ALL TOGETHER HERE.
            tile=squeeze(CESMPercentIceSheet(:,:,z));
            save(strcat('tile_storage/',f(t).name,'IceSheetZtile_',num2str(z)),'tile'); %SAVE TILE TO FILE in individual layers, INSTEAD OF TRYING TO CAT THEM ALL TOGETHER HERE.
        end
        clear CESMPercentGlacier CESMPercentIceSheet
        
        %shift GLOBE/CESM indices along row to new tile location
        [GLOBEis,GLOBEjs] = shift_tiles(t,GLOBEis,GLOBEjs,GLOBEnlat(t),GLOBEnlon(t));
        [CESMis,CESMjs] = shift_tiles(t,CESMis,CESMjs,CESMnlat(t),CESMnlon(t));

    end
    
    disp('Done processing data.')
    
    %Save topo and land mask to file for later use.
    save('tile_storage/CESMtopo','CESMtopo')
    save('tile_storage/CESMlsmsk','CESMlsmsk')
    
    CESM_land_mask=zeros(size(CESMtopo),'uint8');
    CESM_land_mask(~isnan(CESMtopo))=1;
    
end

%% Output final processed files in netcdf form
if output_files
    
    OutputDir='output';
    
    %% %%Output 3-min fields of topography, land-sea mask, lat and lon.%%%%
    
    %load topography from .mat file (this is done so that if Matlab dies, I don't have to re-run entire processing to get here again).  
    load tile_storage/CESMtopo
    load tile_storage/CESMlsmsk

    disp('Defining topography file...')
    fn='topography.nc';
    fname=fullfile(OutputDir,fn);
    delete(fname);
    
    nccreate(fname,'TOPO_ICE',...
        'Format','classic',...
        'Dimensions',{'lon',size(CESMtopo,2),'lat',size(CESMtopo,1)},...
        'Datatype','int16')
    
    nccreate(fname,'LANDMASK',...
        'Format','classic',...
        'Dimensions',{'lon',size(CESMtopo,2),'lat',size(CESMtopo,1)},...
        'Datatype','int16')
    
    nccreate(fname,'LATIXY',...
        'Format','classic',...
        'Dimensions',{'LONGXY',size(CESMtopo,2),'lat',size(CESMtopo,1)},...
        'Datatype','single')
    
    nccreate(fname,'LONGXY',...
        'Format','classic',...
        'Dimensions',{'lon',size(CESMtopo,2),'lat',size(CESMtopo,1)},...
        'Datatype','single')
    
    disp('Defining topography file... done.  Writing topography file...')
    
    ncwrite(fname,'TOPO_ICE',fliplr(int16(CESMtopo)'),[1 1])
    ncwriteatt(fname,'TOPO_ICE','Data_Description','Global topography aggregated from 30-second GLOBE topography.  Elevation indicates mean elevation of all ')
    ncwrite(fname,'LANDMASK',fliplr(int16(CESMlsmsk)'),[1 1])
    
    ncwrite(fname,'LATIXY',single(CESMlat)',[1 1])
    
    ncwrite(fname,'LONGXY',single(CESMlon)',[1 1])
    
    disp('Writing topography file... Done.  Defining PCT_GLC_GIC file...')
    
    %% %%Output 3-D glacier coverage map%%%%
    
    %Define file name
    fn='PCT_GLC.nc';
    fname=fullfile(OutputDir,fn);
    delete(fname); %remove file if it exists
    %Define and write supporting data.

    BinCenters=binedges(1:end-1)+binres./2;  
    nccreate(fname,'BIN_CENTERS',...
        'Format','classic',...
        'Dimensions',{'z',Inf},...
        'Datatype','single')

    nccreate(fname,'LATIXY',...
        'Format','classic',...
        'Dimensions',{'lon',size(CESMtopo,2),'lat',size(CESMtopo,1)},...
        'Datatype','single')
    
    nccreate(fname,'LONGXY',...
        'Format','classic',...
        'Dimensions',{'lon',size(CESMtopo,2),'lat',size(CESMtopo,1)},...
        'Datatype','single')
    
    nccreate(fname,'LANDMASK',...
        'Format','classic',...
        'Dimensions',{'lon',size(CESMtopo,2),'lat',size(CESMtopo,1)},...
        'Datatype','int16')
    
    nccreate(fname,'PCT_GLC_GIC',...
        'Format','classic',...
        'Dimensions',{'lon',size(CESMtopo,2),'lat',size(CESMtopo,1),'z',Inf},...
        'Datatype','single')
    
    nccreate(fname,'PCT_GLC_ICESHEET',...
        'Format','classic',...
        'Dimensions',{'lon',size(CESMtopo,2),'lat',size(CESMtopo,1),'z',Inf},...
        'Datatype','single')
    
    disp('Writing PCT_GLC file...')

    ncwrite(fname,'BIN_CENTERS',single(BinCenters),1)   
    ncwrite(fname,'LATIXY',single(CESMlat)',[1 1])
    ncwrite(fname,'LONGXY',single(CESMlon)',[1 1])
    ncwrite(fname,'LANDMASK',fliplr(int16(CESMlsmsk)'),[1 1])

    for z=1:numbins
        fGIC=dir(strcat('tile_storage/*10g_GlacierZtile_',num2str(z),'.mat'));
        fIS=dir(strcat('tile_storage/*10gIceSheetZtile_',num2str(z),'.mat'));

        pctGIC=zeros(size(CESMtopo),'single');
        pctIS=zeros(size(CESMtopo),'single');
        lat_start=1;
        lon_start=1;
        %Load all tiles for vertical layer z and concatenate.
        for t=1:16 
            load(strcat('tile_storage/',fGIC(t).name));
            pctGIC( lat_start:lat_start+CESMnlat(t)-1 , lon_start:lon_start+CESMnlon(t)-1 , : ) = tile;
            load(strcat('tile_storage/',fGIC(t).name));
            pctIS( lat_start:lat_start+CESMnlat(t)-1 , lon_start:lon_start+CESMnlon(t)-1 , : ) = tile;
            [lat_start,lon_start] = shift_tiles(t,lat_start,lon_start,CESMnlat(t),CESMnlon(t));
        end
        disp(['Writing glacier/ice sheet % file, level ' num2str(z) '...'])
        ncwrite(fname,'PCT_GLC_GIC',fliplr(pctGIC'),[1 1 z])
        ncwrite(fname,'PCT_GLC_ICESHEET',fliplr(pctIS'),[1 1 z])
    end
    
    disp('Done writing PCT_GLC file...')
    
    %Write attributes
    ncwriteatt(fname,'/','Data_description','Global glacier coverage dataset constructed by Jeremy Fyke (fyke@lanl.gov) and Bill Sacks using Alex Gardner 30" ice coverage data and equivalent GLOBE topography.  Netcdf3 format.  Value at (lat,lon,z) denotes fraction of total land area in grid cell that is covered by glacier/ice caps which occur at that elevation band.  BinCenter values represent central elevations for each elevation band.  Bin boundaries sit midway between BinCenter values.  Summing vertically will give total fractional glacier coverage for (i,j) point.')

end

