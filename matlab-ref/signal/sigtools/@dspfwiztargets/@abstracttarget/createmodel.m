function pos = createmodel(hTar)
%CREATEMODEL Create a subsystem.

%   Copyright 1995-2008 The MathWorks, Inc.
%   $Revision: 1.1.6.11 $  $Date: 2009/07/14 04:03:29 $

targetsubsys = hTar.Destination;
if strcmpi(targetsubsys,'current')
    if syslocked(gcs) || syslinked(gcs),
        % Create a new system if required
        sys = uniq_sys;
        new_system(sys, 'Model');
    else
        % Get current system, if specified. Do not use a locked block diagram,
        % it's probably an invisibly loaded library anyway.
        sys = gcs;
        if isempty(sys),
            sys = 'Untitled';
            new_system(sys, 'Model');
        end
    end
elseif strcmpi(targetsubsys,'new')
    % Create a new system if required
    sys = uniq_sys;
    new_system(sys, 'Model');
elseif ~isempty(hTar.system) && ~isempty(strmatch(hTar.system, find_system)),
    % If current system is open
    sys = hTar.system;
elseif isempty(targetsubsys),
    error(generatemsgid('InvalidSubSystem'), 'The Destination cannot be empty.');
elseif ~sysexist(targetsubsys),
    error(generatemsgid('InvalidSubSystem'), ...
        'The Destination ''%s'' does not exist.', targetsubsys);
else
    % User Defined
    sys = targetsubsys;
end

% Get subsystem name:
sysname = hTar.blockname;
if isempty(sysname),
    sysname = 'Filter Realization';
end

if strcmpi(hTar.OverwriteBlock, 'on')
   
    % Delete block to overwrite and return its position
    [subsys, pos] = delete_block2overwrite(sys, sysname);
else
    subsys = uniq_sys([sys '/' sysname]);
    % Avoid overlaying a block on top of another (generated by Filter Wizard).
    pos = offset_pos(sys);
end

% Update object (case blockname had to be changed)
slindex = findstr(subsys,'/');
hTar.blockname = subsys(slindex(end)+1:end);
hTar.system = subsys;

%-----------------------------------------------------------
function [subsys, pos] = delete_block2overwrite(sys, sysname)
% DELETE_BLOCK2OVERWRITE

subsys = [sys '/' sysname];
slindex = findstr(sysname,'/');

currentblk = find_system(sys, 'SearchDepth', 1, ...
    'LookUnderMasks', 'all', 'Name', sysname);

if isempty(slindex) % will be empty only when sysname is Filter
    % eg: Find out if a block 'Filter' already exist in 'Untitled'
    if isempty(currentblk)
             warning(generatemsgid('FailedOverwrite'), ... 
         'The block named %s was not found. Failed to overwrite.',sysname); % overwrite block which does not exists
    else
        set_param(sys,'CurrentBlock',sysname); % eg:Bring Focus to the 'Filter' block in 'Untitled'
    end
end

pos = [-35 40 40 80]; % Default position

if isempty(currentblk),
    pos = offset_pos(sys);
 else
    if any(strcmpi(get_param(currentblk{1},'Tag'), ...
            {'BlockMethodSubSystem','FilterWizardSubSystem'})),
        pos = get_param(currentblk{1}, 'Position');
    else
        % Change name
        subsys = uniq_sys(subsys);
    end
end

%-----------------------------------------------------------
function new_sys = uniq_sys(sys)
% UNIQ_SYS Generate a unique system name, based on a desired system name.
%   NEW_SYS = UNIQ_SYS(SYS).  Note that the system is not created.  If
%   SYS is not provided, the default system name 'Untitled' is used.
%
%   See also UNIQ_BLK.

if nargin==0 || isempty(sys),
  new_sys='Untitled';
else
  new_sys = sys;
end

send_warn = false;
if sysexist(new_sys),
   send_warn = true; 
end

while( sysexist(new_sys) ),
  [numsuff,prefix]=namenum(new_sys);
  if isempty(numsuff),
    new_sys=[new_sys '1'];  %#ok<AGROW> % System name did not end with a number
  else
    new_sys=[prefix num2str(numsuff+1)];
  end
end

if send_warn,
    slindex = findstr(new_sys,'/');
    if ~isempty(slindex),
        blockname = new_sys(slindex(end)+1:end);
        warning('DSPBLKS:createmodel:NameChanged', ...
            ['The generated block has been renamed ', blockname, '.']);
    end
end

%-----------------------------------------------------------
function [suffix,prefix] = namenum(s)
%NAMENUM Parse a string name for trailing numeric characters.
%   [SUFFIX,PREFIX] = NAMENUM(S) returns the value corresponding to the
%   numeric characters found at the end of the string S as SUFFIX.
%   Optionally returns the beginning portion of the string (up to but not
%   including any trailing numeric characters) as string PREFIX.
%
%   Only contiguous numeric characters located at the end of the string are
%   converted to the numeric SUFFIX; any other numeric characters are simply
%   returned as part of the PREFIX string.
%
%   If no trailing numeric characters are found, empty is returned for SUFFIX
%   and the entire string S returned as PREFIX.

suffix = [];
prefix = s;
if isempty(s) || ~ischar(s) || s(end)<'0' || s(end)>'9',
  return;
end
[~,c] = find( (s<'0') | (s>'9') );
mc = max(c);
prefix = s(1:mc);
suffix = str2double(s(mc+1:end));

%-----------------------------------------------------------
function y=sysexist(sys)
%SYSEXIST Returns true (1) if the specified path is a Simulink system or
%         subsystem and is currently open; otherwise, returns false (0).
%
%         See also BLKEXIST.

stype=systype(sys);
y = strcmp(stype,'model') | strcmp(stype,'subsystem') | strcmp(stype,'block');

%-----------------------------------------------------------
function y=syslinked(sys)
% SYSLINKED Determine whether a system is linked.

y = false;
try
    if ~isempty(sys),
        y = strcmpi(get_param(bdroot(sys),'staticlinkstatus'),'resolved');
    end
catch ME %#ok<NASGU>
end


%-----------------------------------------------------------
function y = syslocked(sys)
% SYSLOCKED Determine whether a system is locked.
%  This function is error-protected against calls on
%  subsystems or blocks, which do not have a lock parameter.

y = ~isempty(sys);
if y,
   y = strcmpi(get_param(bdroot(sys),'lock'),'on');
end


%-----------------------------------------------------------
function y=systype(p)
%SYSTYPE Returns type of Simulink entity.
%   SYSTYPE(P) returns a type string corresponding to the
%   Simulink entity described by path P.  Possible type
%   strings returned are:
%        'model'     if P is the top-level model
%        'subsystem' if P is a subsystem
%        'block'     if P is a block,
%        'entity'    if P is a Simulink entity other than a model,
%                    subsystem, or block.
%        'none'      if P is not a Simulink entity.

% Decision Logic:
%
% if it has a "BlockType" field,
%   it's a block or subsystem of the top-level system.
%   if BlockType is "SubSystem",
%     it's a subsystem block.
%   else
%     it's a Simulink block
% else if it has a "Version" field,
%   it's the top-level system.
% else if it has a "Name" field,
%   it's some unknown Simulink entity,
% else
%   it's not a Simulink entity.

try
    bt=get_param(p,'BlockType');
    this_is=1;
catch ME %#ok<NASGU>
    this_is=0;
end

if this_is,
  if strcmp(bt,'SubSystem'),
    y='subsystem';
  else
    y='block';
  end
  return
end

try
    get_param(p,'Version');
    this_is=1;
catch ME %#ok<NASGU>
    this_is=0;
end

if this_is,
  y='model';
  return
end

try
    get_param(p,'Name');
    this_is=1;
catch ME %#ok<NASGU>
    this_is=0;
end

if this_is,
  y='entity';
else
  y='none';
  
  % At this point, we've tried everything and still
  % do not match the block
  % Clean up by clearing the last error message

end

%-----------------------------------------------------------
function pos=offset_pos(sys)
% Avoid overlaying a block on top of another (generated by Filter Wizard).

tag = {'BlockMethodSubSystem','FilterWizardSubSystem'};
maxpos = [-35 40 40 80]; % Default position
for i = 1:2,
    pos = get_param(find_system(sys, 'SearchDepth', 1, 'Tag', tag{i}), 'Position');
    if ~isempty(pos),
        if length(pos)>1,
            pos = max(cell2mat(pos));
        else
            pos = pos{1};
        end
        maxpos = max(pos,maxpos);
    end
end
pos = maxpos + [100 0 100 0];

% resize the block for consistency
blksize = [0 0 75 40];
blkpos = [pos(1:2) pos(1:2)];   % set the top-left corner position of the new block
pos = blkpos + blksize;
